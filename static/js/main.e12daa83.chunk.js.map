{"version":3,"sources":["img/Bert.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","bertImg","alt","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,8KCkE5BC,MA9Df,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAASC,IAAI,uBACvB,oEAFF,wBAIE,gDACA,2EAGF,0BAAMH,UAAU,YACd,oDACE,uBAAGA,UAAU,iBAAb,2UAIF,kDACE,uBAAGA,UAAU,iBAAb,+IAC8I,6BAD9I,iEAEgE,6BAFhE,2RAG0R,6BAH1R,oJAImJ,6BAJnJ,oGAKmG,6BALnG,0FAOyF,6BAPzF,qHASoH,6BATpH,qHAUoH,6BAAM,8BAE1H,wCACA,uBAAGA,UAAU,iBACX,uBAAGA,UAAW,YAAYI,KAAK,2DAA/B,eAAwG,6BACxG,uBAAGJ,UAAW,YAAYI,KAAK,oDAA/B,4BAA8G,6BAC9G,uBAAGJ,UAAW,YAAYI,KAAK,8DAA/B,0BAAsH,6BACtH,uBAAGJ,UAAW,YAAYI,KAAK,6FAA/B,mBAA8I,6BAC9I,uBAAGJ,UAAW,YAAYI,KAAK,sDAA/B,uBALF,SAKmH,8BAEnH,gDACA,uBAAGJ,UAAU,iBACX,6DACE,mFAFJ,+CAGoD,6BAHpD,mCAIwC,6BAJxC,uBAK4B,6BACxB,2EANJ,2BAOgC,6BAPhC,6EAQkF,6BARlF,mCASwC,6BATxC,uBAU4B,6BACxB,wIACA,4DACA,gEC5CMK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e12daa83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Bert.659d9dff.png\";","import React from 'react';\nimport bertImg from './img/Bert.png';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={bertImg} alt=\"A friendly picture\" />\n        <h1>Investigating transformer model BERT</h1>\n        Small changesssssssss\n        <h2>Project Proposal</h2>\n        <p>Shijing Zhong(sz6539), Michael Li (mal4565)</p>\n\n      </header>\n      <body className=\"App-body\">\n        <h1>Statement of problem</h1>\n          <p className=\"App-paragraph\">\n          There are plenty of papers noted on the existence of syntactic structure inside BERT embedding, but we donâ€™t know whether the model is using that knowledge. Given that previous papers talked about the existence of syntax within BERT, we wanted to quantify how much of that syntax knowledge BERT uses to make its decisions.\n          </p>\n\n        <h1>Plan of Experiment</h1>\n          <p className=\"App-paragraph\">\n            How much does BERT use syntax/the encoded syntax tree in its predictions? To answer the question we plan to conduct these experiments below:<br />\n            1. Shuffle the words randomly (has been done in previous work)<br />\n            2. We modify an approach from Stanford that derives the syntax tree from the embedding space such that we will perturb the embeddings such that the projected space with the syntax tree will be different. Then we will pass this through BERT and evaluate the performance differences<br />\n            3. Use the syntax tree (perhaps from the Stanford Parser) and shuffle different Noun Phrases or verb phrases or something to perturb the sentence<br />\n            4. Design a experiment that checks if BERT relies on the syntax knowledge encode in the embedding<br />\n\n            Then we will apply these findings and see if this is preserved when BERT is compressed:<br />\n\n            1. Studies have shown that you can reduce the total amount of heads and still maintain the same amount performance<br />\n            2. Studies have shown that you can reduce the total amount of heads and still maintain the same amount performance<br /><br />\n          </p>\n          <h1>Data set</h1>\n          <p className=\"App-paragraph\">\n            <a className= \".App-link\" href=\"https://huggingface.co/transformers/model_doc/bert.html\"> BERT model</a><br />\n            <a className= \".App-link\" href=\"https://github.com/john-hewitt/structural-probes\"> Syntax Structural probe</a><br />\n            <a className= \".App-link\" href=\"https://huggingface.co/transformers/pretrained_models.html\"> Pretrained BERT model</a><br />\n            <a className= \".App-link\" href=\"https://pytorchnlp.readthedocs.io/en/latest/_modules/torchnlp/datasets/penn_treebank.html\"> Penn Tree Bank</a><br />\n            <a className= \".App-link\" href=\"https://nlp.stanford.edu/software/lex-parser.shtml\">The Stanford Parser</a>      <br />      \n          </p>\n          <h1>A Rough Timeline</h1>\n          <p className=\"App-paragraph\">\n            <h3>Set up the dataset and models</h3>\n              <h5>i. Setup perturbations similar to structural-probes</h5>\n                  1. Setup module to perturb structural probes<br />\n                  2. Feed data through this module<br />\n                  3. Evaluate via BERT<br />\n              <h5>ii. Setup perturbations via the syntax tree</h5>\n                  1. Setup Stanford Parser<br />\n                  2. Setup module to perturb syntax tree (choose one easy rule to implement)<br />\n                  3. Feed data through this module<br />\n                  4. Evaluate via BERT<br />\n              <h5>iii. Design a detailed experiment that shows the influence of syntactic knowledge over the BERT accuracy</h5>\n              <h3>Acquire BERT accuracy scores</h3>\n              <h3>Analyze BERT accuracy scores</h3>\n          </p>\n      </body>\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}